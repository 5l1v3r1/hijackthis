// Compile with: mktyplib.exe /nologo IShellLink.odl

[
    helpstring("IShellLinkW Type Library"),
    uuid(76025340-7BB8-4858-8D66-B31951B18521),
    version(1.0)
]
library IShellLink
{
    importlib("stdole2.tlb");

    #define WINAPI __stdcall

    typedef int           UINT;
    typedef long          DWORD;
    typedef long          HLOCAL;
    typedef long          HWND;
    typedef long          LPOLESTR;
    typedef long          LPVOID;
    typedef long          PCIDLIST_ABSOLUTE;
    typedef long          PIDLIST_ABSOLUTE;
    typedef DWORD         COLORREF;
    typedef LPWSTR        LPCOLESTR;
    typedef LPWSTR        LPCTSTR;
    typedef LPWSTR        LPCWSTR;
    typedef LPWSTR        LPTSTR;
    typedef short         SHORT;
    typedef short         WORD;
    typedef unsigned char BYTE;
    typedef unsigned char CHAR;
    typedef void          VOID;
    typedef wchar_t       WCHAR;
    typedef WCHAR         TCHAR;

    typedef enum {
        FALSE_,
        TRUE_
    } BOOL;

    typedef enum {
        S_OK           = 0x00000000, // The method succeeded. If a boolean return value is expected, the returned value is TRUE.
        S_FALSE        = 0x00000001, // The method succeeded and returned the boolean value FALSE.
        E_PENDING      = 0x8000000A, // The data necessary to complete the operation is not yet available.
        E_NOTIMPL      = 0x80004001, // The method is not implemented.
        E_NOINTERFACE  = 0x80004002, // The QueryInterface method did not recognize the requested interface. The interface is not supported.
        E_POINTER      = 0x80004003, // An invalid pointer was used.
        E_ABORT        = 0x80004004, // The operation was aborted because of an unspecified error.
        E_FAIL         = 0x80004005, // An unspecified failure has occurred.
        E_UNEXPECTED   = 0x8000FFFF, // A catastrophic failure has occurred.
        E_ACCESSDENIED = 0x80070005, // A general access-denied error.
        E_HANDLE       = 0x80070006, // An invalid handle was used.
        E_OUTOFMEMORY  = 0x8007000E, // The method failed to allocate necessary memory.
        E_INVALIDARG   = 0x80070057  // One or more arguments are invalid.
    } Common_HRESULT_Values;         // https://msdn.microsoft.com/en-us/library/ms688560(v=vs.85).aspx

    typedef enum {
        HOTKEYF_SHIFT   = 0x1, // SHIFT key
        HOTKEYF_CONTROL = 0x2, // CTRL key
        HOTKEYF_ALT     = 0x4, // ALT key
        HOTKEYF_EXT     = 0x8  // Extended key
    } ModifierFlags;

    typedef enum {
        SLDF_DEFAULT                               = 0x00000000,
        SLDF_HAS_ID_LIST                           = 0x00000001,
        SLDF_HAS_LINK_INFO                         = 0x00000002,
        SLDF_HAS_NAME                              = 0x00000004,
        SLDF_HAS_RELPATH                           = 0x00000008,
        SLDF_HAS_WORKINGDIR                        = 0x00000010,
        SLDF_HAS_ARGS                              = 0x00000020,
        SLDF_HAS_ICONLOCATION                      = 0x00000040,
        SLDF_UNICODE                               = 0x00000080,
        SLDF_FORCE_NO_LINKINFO                     = 0x00000100,
        SLDF_HAS_EXP_SZ                            = 0x00000200,
        SLDF_RUN_IN_SEPARATE                       = 0x00000400, [hidden]
        SLDF_HAS_LOGO3ID                           = 0x00000800,
        SLDF_HAS_DARWINID                          = 0x00001000,
        SLDF_RUNAS_USER                            = 0x00002000,
        SLDF_HAS_EXP_ICON_SZ                       = 0x00004000,
        SLDF_NO_PIDL_ALIAS                         = 0x00008000,
        SLDF_FORCE_UNCNAME                         = 0x00010000,
        SLDF_RUN_WITH_SHIMLAYER                    = 0x00020000,
        SLDF_FORCE_NO_LINKTRACK                    = 0x00040000,
        SLDF_ENABLE_TARGET_METADATA                = 0x00080000,
        SLDF_DISABLE_LINK_PATH_TRACKING            = 0x00100000,
        SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING = 0x00200000,
        SLDF_NO_KF_ALIAS                           = 0x00400000,
        SLDF_ALLOW_LINK_TO_LINK                    = 0x00800000,
        SLDF_UNALIAS_ON_SAVE                       = 0x01000000,
        SLDF_PREFER_ENVIRONMENT_PATH               = 0x02000000,
        SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET      = 0x04000000,
        SLDF_PERSIST_VOLUME_ID_RELATIVE            = 0x08000000, [hidden]
        SLDF_VALID                                 = 0x0FFFF7FF, [hidden]
        SLDF_RESERVED                              = 0x80000000
    } SHELL_LINK_DATA_FLAGS;

    typedef enum {
        SHGNLI_PIDL       = 0x00000001,
        SHGNLI_PREFIXNAME = 0x00000002,
        SHGNLI_NOUNIQUE   = 0x00000004,
        SHGNLI_NOLNK      = 0x00000008,
        SHGNLI_NOLOCNAME  = 0x00000010,
        SHGNLI_USEURLEXT  = 0x00000020
    } SHGNLI_Flags;

    typedef enum {
        SW_HIDE            = 0,
        SW_SHOWNORMAL      = 1,
        SW_NORMAL          = 1,
        SW_SHOWMINIMIZED   = 2,
        SW_SHOWMAXIMIZED   = 3,
        SW_MAXIMIZE        = 3,
        SW_SHOWNOACTIVATE  = 4,
        SW_SHOW            = 5,
        SW_MINIMIZE        = 6,
        SW_SHOWMINNOACTIVE = 7,
        SW_SHOWNA          = 8,
        SW_RESTORE         = 9,
        SW_SHOWDEFAULT     = 10,
        SW_FORCEMINIMIZE   = 11,
    } ShowWindowConstants;

    typedef enum SLGP_FLAGS {
        SLGP_SHORTPATH        = 0x1,
        SLGP_UNCPRIORITY      = 0x2,
        SLGP_RAWPATH          = 0x4,
        SLGP_RELATIVEPRIORITY = 0x8
    } SLGP_FLAGS;

    typedef enum SLR_FLAGS {
        SLR_NO_UI                     = 0x0001,
        SLR_ANY_MATCH                 = 0x0002,
        SLR_UPDATE                    = 0x0004,
        SLR_NOUPDATE                  = 0x0008,
        SLR_NOSEARCH                  = 0x0010,
        SLR_NOTRACK                   = 0x0020,
        SLR_NOLINKINFO                = 0x0040,
        SLR_INVOKE_MSI                = 0x0080,
        SLR_NO_UI_WITH_MSG_PUMP       = 0x0101,
        SLR_OFFER_DELETE_WITHOUT_FILE = 0x0200,
        SLR_KNOWNFOLDER               = 0x0400,
        SLR_MACHINE_IN_LOCAL_TARGET   = 0x0800,
        SLR_UPDATE_MACHINE_AND_SID    = 0x1000
    } SLR_FLAGS;

    typedef enum {
        // Access
        STGM_READ             = 0x00000000,
        STGM_WRITE            = 0x00000001,
        STGM_READWRITE        = 0x00000002,

        // Sharing
        STGM_SHARE_DENY_NONE  = 0x00000040,
        STGM_SHARE_DENY_READ  = 0x00000030,
        STGM_SHARE_DENY_WRITE = 0x00000020,
        STGM_SHARE_EXCLUSIVE  = 0x00000010,
        STGM_PRIORITY         = 0x00040000,

        // Creation
        STGM_CREATE           = 0x00001000,
        STGM_CONVERT          = 0x00020000,
        STGM_FAILIFTHERE      = 0x00000000,

        // Transactioning
        STGM_DIRECT           = 0x00000000,
        STGM_TRANSACTED       = 0x00010000,

        // Transactioning Performance
        STGM_NOSCRATCH        = 0x00100000,
        STGM_NOSNAPSHOT       = 0x00200000,

        // Direct SWMR and Simple
        STGM_SIMPLE           = 0x08000000,
        STGM_DIRECT_SWMR      = 0x00400000,

        // Delete On Release
        STGM_DELETEONRELEASE  = 0x04000000
    } STGM;

    typedef enum {                     // The following table shows the symbolic constant names, hexadecimal values, and mouse
                                       // or keyboard equivalents for the virtual-key codes used by the system. The codes are
                                       // listed in numeric order.

        VK_LBUTTON             = 0x01, // Left mouse button
        VK_RBUTTON             = 0x02, // Right mouse button
        VK_CANCEL              = 0x03, // Control-break processing
        VK_MBUTTON             = 0x04, // Middle mouse button (three-button mouse)  NOT contiguous with L & RBUTTON
        VK_XBUTTON1            = 0x05, // X1 mouse button                           NOT contiguous with L & RBUTTON
        VK_XBUTTON2            = 0x06, // X2 mouse button                           NOT contiguous with L & RBUTTON

        // 0x07                        // Undefined

        VK_BACK                = 0x08, // BACKSPACE key
        VK_TAB                 = 0x09, // TAB key

        // 0x0A - 0x0B                 // Reserved

        VK_CLEAR               = 0x0C, // CLEAR key
        VK_RETURN              = 0x0D, // ENTER key

        // 0x0E - 0x0F                 // Undefined

        VK_SHIFT               = 0x10, // SHIFT key
        VK_CONTROL             = 0x11, // CTRL key
        VK_MENU                = 0x12, // ALT key
        VK_PAUSE               = 0x13, // PAUSE key
        VK_CAPITAL             = 0x14, // CAPS LOCK key

        VK_KANA                = 0x15, // IME Kana mode
        VK_HANGUEL             = 0x15, // IME Hanguel mode (maintained for compatibility; use VK_HANGUL)
        VK_HANGUL              = 0x15, // IME Hangul mode

        // 0x16                        // Undefined

        VK_JUNJA               = 0x17, // IME Junja mode
        VK_FINAL               = 0x18, // IME final mode
        VK_HANJA               = 0x19, // IME Hanja mode
        VK_KANJI               = 0x19, // IME Kanji mode

        // 0x1A                        // Undefined

        VK_ESCAPE              = 0x1B, // ESC key

        VK_CONVERT             = 0x1C, // IME convert
        VK_NONCONVERT          = 0x1D, // IME nonconvert
        VK_ACCEPT              = 0x1E, // IME accept
        VK_MODECHANGE          = 0x1F, // IME mode change request

        VK_SPACE               = 0x20, // SPACEBAR
        VK_PRIOR               = 0x21, // PAGE UP key
        VK_NEXT                = 0x22, // PAGE DOWN key
        VK_END                 = 0x23, // END key
        VK_HOME                = 0x24, // HOME key
        VK_LEFT                = 0x25, // LEFT ARROW key
        VK_UP                  = 0x26, // UP ARROW key
        VK_RIGHT               = 0x27, // RIGHT ARROW key
        VK_DOWN                = 0x28, // DOWN ARROW key
        VK_SELECT              = 0x29, // SELECT key
        VK_PRINT               = 0x2A, // PRINT key
        VK_EXECUTE             = 0x2B, // EXECUTE key
        VK_SNAPSHOT            = 0x2C, // PRINT SCREEN key
        VK_INSERT              = 0x2D, // INS key
        VK_DELETE              = 0x2E, // DEL key
        VK_HELP                = 0x2F, // HELP key

        VK_0                   = 0x30, // 0 key
        VK_1                   = 0x31, // 1 key
        VK_2                   = 0x32, // 2 key
        VK_3                   = 0x33, // 3 key
        VK_4                   = 0x34, // 4 key
        VK_5                   = 0x35, // 5 key
        VK_6                   = 0x36, // 6 key
        VK_7                   = 0x37, // 7 key
        VK_8                   = 0x38, // 8 key
        VK_9                   = 0x39, // 9 key

        // 0x3A - 0x40                 // Undefined

        VK_A                   = 0x41, // A key
        VK_B                   = 0x42, // B key
        VK_C                   = 0x43, // C key
        VK_D                   = 0x44, // D key
        VK_E                   = 0x45, // E key
        VK_F                   = 0x46, // F key
        VK_G                   = 0x47, // G key
        VK_H                   = 0x48, // H key
        VK_I                   = 0x49, // I key
        VK_J                   = 0x4A, // J key
        VK_K                   = 0x4B, // K key
        VK_L                   = 0x4C, // L key
        VK_M                   = 0x4D, // M key
        VK_N                   = 0x4E, // N key
        VK_O                   = 0x4F, // O key
        VK_P                   = 0x50, // P key
        VK_Q                   = 0x51, // Q key
        VK_R                   = 0x52, // R key
        VK_S                   = 0x53, // S key
        VK_T                   = 0x54, // T key
        VK_U                   = 0x55, // U key
        VK_V                   = 0x56, // V key
        VK_W                   = 0x57, // W key
        VK_X                   = 0x58, // X key
        VK_Y                   = 0x59, // Y key
        VK_Z                   = 0x5A, // Z key

        VK_LWIN                = 0x5B, // Left Windows key (Natural keyboard)
        VK_RWIN                = 0x5C, // Right Windows key (Natural keyboard)
        VK_APPS                = 0x5D, // Applications key (Natural keyboard)

        // 0x5E                        // Reserved

        VK_SLEEP               = 0x5F, // Computer Sleep key

        VK_NUMPAD0             = 0x60, // Numeric keypad 0 key
        VK_NUMPAD1             = 0x61, // Numeric keypad 1 key
        VK_NUMPAD2             = 0x62, // Numeric keypad 2 key
        VK_NUMPAD3             = 0x63, // Numeric keypad 3 key
        VK_NUMPAD4             = 0x64, // Numeric keypad 4 key
        VK_NUMPAD5             = 0x65, // Numeric keypad 5 key
        VK_NUMPAD6             = 0x66, // Numeric keypad 6 key
        VK_NUMPAD7             = 0x67, // Numeric keypad 7 key
        VK_NUMPAD8             = 0x68, // Numeric keypad 8 key
        VK_NUMPAD9             = 0x69, // Numeric keypad 9 key

        VK_MULTIPLY            = 0x6A, // Multiply key
        VK_ADD                 = 0x6B, // Add key
        VK_SEPARATOR           = 0x6C, // Separator key
        VK_SUBTRACT            = 0x6D, // Subtract key
        VK_DECIMAL             = 0x6E, // Decimal key
        VK_DIVIDE              = 0x6F, // Divide key

        VK_F1                  = 0x70, // F1 key
        VK_F2                  = 0x71, // F2 key
        VK_F3                  = 0x72, // F3 key
        VK_F4                  = 0x73, // F4 key
        VK_F5                  = 0x74, // F5 key
        VK_F6                  = 0x75, // F6 key
        VK_F7                  = 0x76, // F7 key
        VK_F8                  = 0x77, // F8 key
        VK_F9                  = 0x78, // F9 key
        VK_F10                 = 0x79, // F10 key
        VK_F11                 = 0x7A, // F11 key
        VK_F12                 = 0x7B, // F12 key
        VK_F13                 = 0x7C, // F13 key
        VK_F14                 = 0x7D, // F14 key
        VK_F15                 = 0x7E, // F15 key
        VK_F16                 = 0x7F, // F16 key
        VK_F17                 = 0x80, // F17 key
        VK_F18                 = 0x81, // F18 key
        VK_F19                 = 0x82, // F19 key
        VK_F20                 = 0x83, // F20 key
        VK_F21                 = 0x84, // F21 key
        VK_F22                 = 0x85, // F22 key
        VK_F23                 = 0x86, // F23 key
        VK_F24                 = 0x87, // F24 key

        // 0x88 - 0x8F                 // Unassigned

        VK_NUMLOCK             = 0x90, // NUM LOCK key
        VK_SCROLL              = 0x91, // SCROLL LOCK key

        VK_OEM_NEC_EQUAL       = 0x92, // NEC PC-9800 kbd definitions.   '=' key on numpad
        VK_OEM_FJ_JISHO        = 0x92, // Fujitsu/OASYS kbd definitions. 'Dictionary' key
        VK_OEM_FJ_MASSHOU      = 0x93, // Fujitsu/OASYS kbd definitions. 'Unregister word' key
        VK_OEM_FJ_TOUROKU      = 0x94, // Fujitsu/OASYS kbd definitions. 'Register word' key
        VK_OEM_FJ_LOYA         = 0x95, // Fujitsu/OASYS kbd definitions. 'Left OYAYUBI' key
        VK_OEM_FJ_ROYA         = 0x96, // Fujitsu/OASYS kbd definitions. 'Right OYAYUBI' key

        // 0x97 - 0x9F                 // Unassigned

                                       // VK_L* & VK_R* - left and right Alt, Ctrl and Shift virtual keys.
                                       // Used only as parameters to GetAsyncKeyState() and GetKeyState().
                                       // No other API or message will distinguish left and right keys in this way.

        VK_LSHIFT              = 0xA0, // Left SHIFT key
        VK_RSHIFT              = 0xA1, // Right SHIFT key
        VK_LCONTROL            = 0xA2, // Left CONTROL key
        VK_RCONTROL            = 0xA3, // Right CONTROL key
        VK_LMENU               = 0xA4, // Left MENU key
        VK_RMENU               = 0xA5, // Right MENU key

        VK_BROWSER_BACK        = 0xA6, // Browser Back key
        VK_BROWSER_FORWARD     = 0xA7, // Browser Forward key
        VK_BROWSER_REFRESH     = 0xA8, // Browser Refresh key
        VK_BROWSER_STOP        = 0xA9, // Browser Stop key
        VK_BROWSER_SEARCH      = 0xAA, // Browser Search key
        VK_BROWSER_FAVORITES   = 0xAB, // Browser Favorites key
        VK_BROWSER_HOME        = 0xAC, // Browser Start and Home key

        VK_VOLUME_MUTE         = 0xAD, // Volume Mute key
        VK_VOLUME_DOWN         = 0xAE, // Volume Down key
        VK_VOLUME_UP           = 0xAF, // Volume Up key
        VK_MEDIA_NEXT_TRACK    = 0xB0, // Next Track key
        VK_MEDIA_PREV_TRACK    = 0xB1, // Previous Track key
        VK_MEDIA_STOP          = 0xB2, // Stop Media key
        VK_MEDIA_PLAY_PAUSE    = 0xB3, // Play/Pause Media key
        VK_LAUNCH_MAIL         = 0xB4, // Start Mail key
        VK_LAUNCH_MEDIA_SELECT = 0xB5, // Select Media key
        VK_LAUNCH_APP1         = 0xB6, // Start Application 1 key
        VK_LAUNCH_APP2         = 0xB7, // Start Application 2 key

        // 0xB8 - 0xB9                 // Reserved

                                       // VK_OEM_#  Used for miscellaneous characters; it can vary by keyboard.

        VK_OEM_1               = 0xBA, // For the US standard keyboard, the ';:' key
        VK_OEM_PLUS            = 0xBB, // For any country/region, the '+' key
        VK_OEM_COMMA           = 0xBC, // For any country/region, the ',' key
        VK_OEM_MINUS           = 0xBD, // For any country/region, the '-' key
        VK_OEM_PERIOD          = 0xBE, // For any country/region, the '.' key
        VK_OEM_2               = 0xBF, // For the US standard keyboard, the '/?' key
        VK_OEM_3               = 0xC0, // For the US standard keyboard, the '`~' key

        // 0xC1 - 0xD7                 // Reserved

        // 0xD8 - 0xDA                 // Unassigned

        VK_OEM_4               = 0xDB, // For the US standard keyboard, the '[{' key
        VK_OEM_5               = 0xDC, // For the US standard keyboard, the '\|' key
        VK_OEM_6               = 0xDD, // For the US standard keyboard, the ']}' key
        VK_OEM_7               = 0xDE, // For the US standard keyboard, the 'single-quote/double-quote' key
        VK_OEM_8               = 0xDF, // Used for miscellaneous characters; it can vary by keyboard.

        // 0xE0                        // Reserved

                                       // Various extended or enhanced keyboards

        VK_OEM_AX              = 0xE1, // OEM specific. 'AX' key on Japanese AX kbd
        VK_OEM_102             = 0xE2, // Either the angle bracket key or the backslash key on the RT 102-key keyboard
        VK_ICO_HELP            = 0xE3, // OEM specific. Help key on ICO
        VK_ICO_00              = 0xE4, // OEM specific. 00 key on ICO
        VK_PROCESSKEY          = 0xE5, // IME PROCESS key
        VK_ICO_CLEAR           = 0xE6, // OEM specific

        VK_PACKET              = 0xE7, // Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the
                                       // low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more
                                       // information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP.

        // 0xE8                        // Unassigned

        VK_OEM_RESET           = 0xE9, // 0xE9 - 0xF5  OEM specific. Nokia/Ericsson definitions
        VK_OEM_JUMP            = 0xEA,
        VK_OEM_PA1             = 0xEB,
        VK_OEM_PA2             = 0xEC,
        VK_OEM_PA3             = 0xED,
        VK_OEM_WSCTRL          = 0xEE,
        VK_OEM_CUSEL           = 0xEF,
        VK_OEM_ATTN            = 0xF0,
        VK_OEM_FINISH          = 0xF1,
        VK_OEM_COPY            = 0xF2,
        VK_OEM_AUTO            = 0xF3,
        VK_OEM_ENLW            = 0xF4,
        VK_OEM_BACKTAB         = 0xF5,

        VK_ATTN                = 0xF6, // Attn key
        VK_CRSEL               = 0xF7, // CrSel key
        VK_EXSEL               = 0xF8, // ExSel key
        VK_EREOF               = 0xF9, // Erase EOF key
        VK_PLAY                = 0xFA, // Play key
        VK_ZOOM                = 0xFB, // Zoom key
        VK_NONAME              = 0xFC, // Reserved
        VK_PA1                 = 0xFD, // PA1 key
        VK_OEM_CLEAR           = 0xFE  // Clear key

        // 0xFF                        // Reserved

    } VirtualKeyCodes;

    typedef struct _COORD {
        SHORT X;
        SHORT Y;
    } COORD;                //, *PCOORD

    typedef struct tagDATABLOCKHEADER {
        DWORD cbSize;
        DWORD dwSignature;
    } DATABLOCK_HEADER;     //, *LPDATABLOCK_HEADER, *LPDBLIST

    #define MAX_PATH 260

    typedef struct {
        DATABLOCK_HEADER dbh;
        CHAR             szDarwinID[MAX_PATH];
        WCHAR            szwDarwinID[MAX_PATH];
    } EXP_DARWIN_LINK;      //, *LPEXP_DARWIN_LINK

    typedef struct {
        DWORD cbSize;
        DWORD dwSignature;
        BYTE  abPropertyStorage[1];
    } EXP_PROPERTYSTORAGE;

    typedef struct {
        DWORD cbSize;
        DWORD dwSignature;
        DWORD idSpecialFolder;
        DWORD cbOffset;
    } EXP_SPECIAL_FOLDER;   //, *LPEXP_SPECIAL_FOLDER

    typedef struct {
        DWORD cbSize;
        DWORD dwSignature;
        CHAR  szTarget[MAX_PATH];
        WCHAR swzTarget[MAX_PATH];
    } EXP_SZ_LINK;          //, *LPEXP_SZ_LINK

    #undef MAX_PATH

    #define LF_FACESIZE 32

    typedef struct {
        DATABLOCK_HEADER dbh;
        WORD             wFillAttribute;
        WORD             wPopupFillAttribute;
        COORD            dwScreenBufferSize;
        COORD            dwWindowSize;
        COORD            dwWindowOrigin;
        DWORD            nFont;
        DWORD            nInputBufferSize;
        COORD            dwFontSize;
        UINT             uFontFamily;
        UINT             uFontWeight;
        WCHAR            FaceName[LF_FACESIZE];
        UINT             uCursorSize;
        BOOL             bFullScreen;
        BOOL             bQuickEdit;
        BOOL             bInsertMode;
        BOOL             bAutoPosition;
        UINT             uHistoryBufferSize;
        UINT             uNumberOfHistoryBuffers;
        BOOL             bHistoryNoDup;
        COLORREF         ColorTable[16];
    } NT_CONSOLE_PROPS;     //, *LPNT_CONSOLE_PROPS

    #undef LF_FACESIZE

    typedef struct {
        DATABLOCK_HEADER dbh;
        UINT             uCodePage;
    } NT_FE_CONSOLE_PROPS;  //, *LPNT_FE_CONSOLE_PROPS

    typedef struct _GUID {
        long          Data1;
        short         Data2;
        short         Data3;
        unsigned char Data4[8];
    } GUID;

    typedef GUID CLSID;

    #define MAX_PATH 260

    typedef struct _WIN32_FIND_DATA {
        DWORD    dwFileAttributes;
        CURRENCY ftCreationTime;        // FILETIME
        CURRENCY ftLastAccessTime;      // FILETIME
        CURRENCY ftLastWriteTime;       // FILETIME
        DWORD    nFileSizeHigh;
        DWORD    nFileSizeLow;
        DWORD    dwReserved0;
        DWORD    dwReserved1;
        TCHAR    cFileName[MAX_PATH];
        TCHAR    cAlternateFileName[14];
    } WIN32_FIND_DATA;                  //, *PWIN32_FIND_DATA, *LPWIN32_FIND_DATA

    #undef MAX_PATH

    [
        hidden,
        odl,
        uuid(0000010C-0000-0000-C000-000000000046)
    ]
    interface IPersist : stdole.IUnknown
    {
        [
            hidden
        ]
        HRESULT GetClassID
        (
            [out, retval] CLSID *pClassID
        );
    }

    [
        odl,
        uuid(0000010B-0000-0000-C000-000000000046)
    ]
    interface IPersistFile : IPersist
    {
        Common_HRESULT_Values IsDirty();    // HRESULT

        HRESULT Load
        (
            [in                 ] LPCOLESTR pszFileName,
            [in, defaultvalue(0)] STGM      dwMode      // DWORD
        );

        HRESULT Save
        (
            [in                 ] LPCOLESTR pszFileName,
            [in, defaultvalue(1)] BOOL      fRemember
        );

        HRESULT SaveCompleted
        (
            [in] LPCOLESTR pszFileName
        );

        HRESULT GetCurFile
        (
            [out, retval] LPOLESTR *ppszFileName
        );
    }

    [
        odl,
        uuid(45E2B4AE-B1C3-11D0-B92F-00A0C90312E1)
    ]
    interface IShellLinkDataList : stdole.IUnknown
    {
        HRESULT AddDataBlock
        (
            [in] VOID *pDataBlock
        );

        HRESULT CopyDataBlock
        (
            [in         ] DWORD   dwSig,
            [out, retval] LPVOID *ppDataBlock   // VOID  *
        );

        HRESULT RemoveDataBlock
        (
            [in] DWORD dwSig
        );

        HRESULT GetFlags
        (
            [out, retval] SHELL_LINK_DATA_FLAGS *pdwFlags   // DWORD
        );

        HRESULT SetFlags
        (
            [in] SHELL_LINK_DATA_FLAGS dwFlags  // DWORD
        );
    }

    [
        odl,
        uuid(000214F9-0000-0000-C000-000000000046)
    ]
    interface IShellLinkW : stdole.IUnknown
    {
        HRESULT GetPath
        (
            [out] LPWSTR     pszFile,
            [in ] int        cchMaxPath,
            [in ] long       pfd,       // WIN32_FIND_DATA *
            [in ] SLGP_FLAGS fFlags     // DWORD
        );

        HRESULT GetIDList
        (
            [out, retval] PIDLIST_ABSOLUTE *ppidl
        );

        HRESULT SetIDList
        (
            [in] PCIDLIST_ABSOLUTE pidl
        );

        HRESULT GetDescription
        (
            [out] LPWSTR pszName,
            [in ] int    cchMaxName
        );

        HRESULT SetDescription
        (
            [in] LPCWSTR pszName
        );

        HRESULT GetWorkingDirectory
        (
            [out] LPWSTR pszDir,
            [in ] int    cchMaxPath
        );

        HRESULT SetWorkingDirectory
        (
            [in] LPCWSTR pszDir
        );

        HRESULT GetArguments
        (
            [out] LPWSTR pszArgs,
            [in ] int    cchMaxPath
        );

        HRESULT SetArguments
        (
            [in] LPCWSTR pszArgs
        );

        HRESULT GetHotkey
        (
            [out, retval] WORD *pwHotkey
        );

        HRESULT SetHotkey
        (
            [in] WORD wHotkey
        );

        HRESULT GetShowCmd
        (
            [out, retval] ShowWindowConstants *piShowCmd // int
        );

        HRESULT SetShowCmd
        (
            [in] ShowWindowConstants iShowCmd // int
        );

        HRESULT GetIconLocation
        (
            [out] LPWSTR pszIconPath,
            [in ] int    cchIconPath,
            [out] int   *piIcon
        );

        HRESULT SetIconLocation
        (
            [in] LPCWSTR pszIconPath,
            [in] int     iIcon
        );

        HRESULT SetRelativePath
        (
            [in                 ] LPCWSTR pszPathRel,
            [in, defaultvalue(0)] DWORD   dwReserved
        );

        HRESULT Resolve
        (
            [in, defaultvalue(0)] HWND      hWnd,
            [in, defaultvalue(0)] SLR_FLAGS fFlags // DWORD
        );

        HRESULT SetPath
        (
            [in] LPCWSTR pszFile
        );
    }

    [   // CLSID_ShellLink
        uuid(00021401-0000-0000-C000-000000000046)
    ]
    coclass ShellLinkW
    {
        interface IShellLinkW;
    }

    [
        dllname("comctl32.dll")
    ]
    module ComCtl32
    {
        const long INFOTIPSIZE = 1024;
    }

    [
        dllname("kernel32.dll")
    ]
    module Kernel32
    {
        [
            entry("LocalFree")
        ]
        HLOCAL WINAPI LocalFree
        (
            [in] HLOCAL hMem
        );
    }

    [
        dllname("ole32.dll")
    ]
    module Ole32
    {
        [
            entry("CoTaskMemFree")
        ]
        void CoTaskMemFree
        (
            [in, defaultvalue(0)] LPVOID pv
        );
    }

    [
        dllname("shell32.dll")
    ]
    module Shell32
    {
        [
            entry("SHGetNewLinkInfoW")
        ]
        BOOL SHGetNewLinkInfo
        (
            [in                 ] LPCTSTR       pszLinkTo,
            [in                 ] LPCTSTR       pszDir,
            [out                ] LPTSTR        pszName,
            [out                ] BOOL         *pfMustCopy,
            [in, defaultvalue(0)] SHGNLI_Flags  uFlags      // UINT
        );
    }

    [
        dllname("shlobj.h") // <-- Dummy DLL
    ]
    module ShlObj
    {
        const long EXP_SZ_LINK_SIG         = 0xA0000001;
        const long NT_CONSOLE_PROPS_SIG    = 0xA0000002;
        const long NT_FE_CONSOLE_PROPS_SIG = 0xA0000004;
        const long EXP_SPECIAL_FOLDER_SIG  = 0xA0000005;
        const long EXP_DARWIN_ID_SIG       = 0xA0000006;
        const long EXP_SZ_ICON_SIG         = 0xA0000007;
        const long EXP_PROPERTYSTORAGE_SIG = 0xA0000009;
    }

    [
        dllname("windef.h") // <-- Dummy DLL
    ]
    module WinDef
    {
        const long MAX_CMDLINE_LEN = 32767; // http://blogs.msdn.com/b/oldnewthing/archive/2003/12/10/56028.aspx
        const long MAX_PATH        = 260;
        const long MAX_PATH_EX     = 32767; // https://msdn.microsoft.com/en-us/library/aa365247(v=vs.85).aspx#maxpath
    }
}
